#include "includes.h"
class PROC_HANDLER {
public:
	int		GetProccessId(const char* proc_name) {
			PROCESSENTRY32 entry;
			entry.dwFlags = sizeof(PROCESSENTRY32);
			HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);
			if (Process32First(snapshot, &entry) == TRUE) {
				while (Process32Next(snapshot, &entry) == TRUE) {
					if (_stricmp(entry.szExeFile, proc_name) == 0) {
						HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ | PROCESS_TERMINATE, FALSE, entry.th32ProcessID);
						CloseHandle(hProcess);
						return entry.th32ProcessID;
					}
				}
			}
			CloseHandle(snapshot);
			return 0;
		}
	int		IsProccessExists(const char* proc_name) {
			if (GetProccessId(proc_name) == 0) {
				return 0;
			}
			else {
				return 1;
			}
		}
	void	KillProcessByPid(int pid)
		{
			TerminateProcess(OpenProcess(SYNCHRONIZE | PROCESS_TERMINATE, TRUE, pid), 0);
		}
	void	KillProccessByName(const char* name) {
			KillProcessByPid(GetProccessId(name));
		}
	void	killAllProccessesWithName(char* name , int max = 20) {
			int n = 0;
			while (GetProccessId(name) != 0) {
				KillProcessByPid(GetProccessId(name));
				n += 1;
				if (n == max) {
					break;
				}
			}
		}
	
};